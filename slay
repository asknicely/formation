#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31mÔÅ±\033[0m  Formation failed  \e[31mÔÅ±\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

if [ -e twirl ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "twirl"
else
	printf "\n ‚ö†Ô∏è  ./twirl not found  üíÉüèæ First, you need to twirl on your haters\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "
   _
  | |
  | |  __   ,_    _  _  _    __, _|_ üçã  __   _  _
  |/  /  \_/  |  / |/ |/ |  /  |  |  |  /  \_/ |/ |
  |__/\__/    |_/  |  |  |_/\_/|_/|_/|_/\__/   |  |
  |\  ---------------------------------------------
  |/  Cause you slay           [for Bash 3.2 - 3.9]
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ  Okay developers now let's get in ${bold}formation${normal}.      ‚îÇ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ
‚îÇ  Safe to run multiple times on the same machine.  ‚îÇ
‚îÇ  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   ‚îÇ
‚îÇ  on what is already installed on the machine.     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection‚Ä¶"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password‚Ä¶"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key‚Ä¶'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies‚Ä¶"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if command -v xcode-select &> /dev/null && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}"; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode‚Ä¶"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# Bash-it
# -----------------------------------------------------------------------------
if [ -d "$HOME/.bash_it" ]; then
	print_success_muted "Bash-it already installed. Skipping."
else
	step "Installing Bash-it‚Ä¶"
	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
	~/.bash_it/install.sh --silent --no-modify-config
	print_success "Bash-it installed!"
fi

# -----------------------------------------------------------------------------
# ENV - Make sure we have the correct shell files for the below to write to
# -----------------------------------------------------------------------------
touch ~/.zshrc
touch ~/.zprofile

# -----------------------------------------------------------------------------
# NVM - We don't need to check if installed. Re-running is harmless
# -----------------------------------------------------------------------------
step "Installing/Updating NVM‚Ä¶"
curl -s https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash  > /dev/null
source ~/.zshrc
source $NVM_DIR/nvm.sh
print_success "NVM installed!"

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
step "Installing Homebrew‚Ä¶"
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew‚Ä¶"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
	eval "$(/opt/homebrew/bin/brew shellenv)"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask‚Ä¶"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/swag/brews ]; then
	chapter "Installing Homebrew formulae‚Ä¶"

	for brew in $(<$cwd/swag/brews); do
		install_brews $brew
	done
fi

###############################################################################
# LINK: java if it exists
###############################################################################
if [ -e "/usr/local/opt/openjdk/libexec/openjdk.jdk" ]; then
	sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
	print_success "Java symlink added!"
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae‚Ä¶"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/swag/casks ]; then
	chapter "Installing apps via Homebrew‚Ä¶"

	for cask in $(<$cwd/swag/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files‚Ä¶"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store‚Ä¶"
if ! command -v mas &> /dev/null; then
    print_warning "Please install mas-cli first: brew install mas. Skipping."
else
    if [ -e "$cwd/swag/apps" ]; then
        while IFS= read -r app; do
            KEY="${app%%::*}"
            VALUE="${app##*::}"
            echo "Installing $VALUE ($KEY)‚Ä¶"
            mas install "$KEY" || echo "‚ö†Ô∏è Failed to install $VALUE ($KEY)"
        done < "$cwd/swag/apps"
    fi
fi

# -----------------------------------------------------------------------------
# Node 20 - We need this version for mobile (as of 2025)
# -----------------------------------------------------------------------------
step "Installing Node 20‚Ä¶"
nvm install 20 > /dev/null
nvm alias default 20 > /dev/null
nvm use 20 > /dev/null
node --version > /dev/null
nodev=$(node -v)
print_success "Using Node $nodev!"

###############################################################################
# INSTALL: npm global packages
###############################################################################
if [ -e $cwd/swag/npm ]; then
	chapter "Installing npm packages‚Ä¶"

	for pkg in $(<$cwd/swag/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi

###############################################################################
# INSTALL: PHP 8
###############################################################################
chapter "Installing PHP version 8.2‚Ä¶"
if [[ ! $(php --version | grep "PHP 8.2") ]]; then
  # Uninstall default PHP that ships with MacOS.
  if brew ls --versions php > /dev/null; then
    brew unlink php
  fi

  echo_install "Installing php@8.2"
  brew tap shivammathur/php
  brew install shivammathur/php/php@8.2 > /dev/null
  brew install shivammathur/php/php@8.3 > /dev/null

  # Need to specify this, otherwise it just installs the default version that ships with MacOs.
  brew link --overwrite --force shivammathur/php/php@8.2 > /dev/null
  export PATH="/usr/local/opt/php@8.2/bin:$PATH"
  export PATH="/usr/local/opt/php@8.2/sbin:$PATH"
  print_success "php@8.2 installed!\n"
else
  print_success_muted "php@8.2 already installed. Skipped."
fi

###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Adding hot sauce‚Ä¶"
if [ -f "$HOME/.hot-sauce" ]; then
	if ask "Do you want to add hot sauce?" Y; then
		. "$HOME/.hot-sauce"; printf "\n  You got hot sauce in your bag. üî• ${bold}Swag.${normal}\n";
	else
		print_success_muted "Hot sauce declined. Skipped.";
	fi
else
	print_warning "No ~/.hot-sauce found. Skipping."
fi

###############################################################################
# üçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçã
###############################################################################
e_lemon_ated
exec $SHELL -l
exit
